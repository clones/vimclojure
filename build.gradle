subprojects {
    apply plugin: 'java-base'

    group = 'vimclojure'
    version = '2.2.0'

    defaultTasks 'build'
}

project(':server') {
    apply plugin: 'clojure'

    repositories {
        clojureReleasesRepo()
    }

    dependencies {
        development 'org.clojure:clojure:1.1.0'
    }

    uploadArchives {
        clojarsDeploy()
    }

    compileClojure.dependsOn compileJava
}

project(':client') {
    task nailgunClientZip(type: Zip) {
        archiveName = "vimclojure-nailgun-client-" + project.version + ".zip"
        into("vimclojure-nailgun-client") {
            from('.') {
                include "ngclient/**/*"
                include "Makefile"
                include "ng.exe"
            }
        }
    }
}

project(':vim') {
    task vimZip(type: Zip) {
        archiveName = "vimclojure-" + project.version + ".zip"
        from('.') {
            include 'autoload/**/*'
            include 'bin/**/*'
            exclude 'bin/kickoff.sh'
            include 'doc/**/*'
            include 'ftdetect/**/*'
            include 'ftplugin/**/*'
            include 'indent/**/*'
            include 'plugin/**/*'
            include 'syntax/**/*'
        }
        from('..') {
            include 'LICENSE.txt'
            include 'README.markdown'
        }
    }

    // Install the Vim part of the plugin
    def installFiles = { File directory, String pattern, File destination ->
        destination.mkdirs()
        ant.copy(todir: destination) {
            fileset dir: directory, includes: pattern
        }
    }

    task installVim << {
        File installDir

        if (project.hasProperty('vimdir')) {
            installDir = new File(project.vimdir)
        } else if (System.getProperty('os.name').toLowerCase().startsWith("win")) {
            installDir = new File(System.getProperty('user.home') + "/vimfiles")
        } else {
            installDir = new File(System.getProperty('user.home') + "/.vim")
        }

        // The Vim files:
        [ 'autoload', 'indent', 'syntax', 'ftdetect', 'ftplugin', 'plugin' ].each {
            File subDir = new File(installDir, it)
            installFiles project.file(it), '**/*.vim', subDir
        }

        // The Docs and other text files:
        [ 'doc', 'ftplugin/clojure' ].each {
            File subDir = new File(installDir, it)
            installFiles project.file(it), '**/*.txt', subDir
        }
    }
}

task genCompletions(type: JavaExec.class) {
    classpath = project.files(
        project(':server').sourceSets.main.clojure.sourceDir,
        project(':server').sourceSets.main.classesDir,
        project(':server').sourceSets.main.compileClasspath
    )
    main = "clojure.main"
    args = [ "-e", "(require 'vimclojure.gencompletions)", "-e",
        "(vimclojure.gencompletions/main " +
            "'clojure.core " +
            "'clojure.inspector " +
            "'clojure.java.browse 'clojure.java.browse-ui 'clojure.java.io 'clojure.java.javadoc 'clojure.java.shell " +
            "'clojure.main " +
            "'clojure.pprint " +
            "'clojure.repl " +
            "'clojure.set " +
            "'clojure.stacktrace " +
            "'clojure.string " +
            "'clojure.template " +
            "'clojure.test 'clojure.test.tap 'clojure.test.junit " +
            "'clojure.walk " +
            "'clojure.xml " +
            "'clojure.zip)"
    ]
}

task runNailgun(type: JavaExec.class, dependsOn: project(':server').classes) {
    classpath = project.files(
        project(':server').sourceSets.main.clojure.sourceDir,
        project(':server').sourceSets.main.classesDir,
        project(':server').sourceSets.main.compileClasspath
    )
    main = 'vimclojure.nailgun.NGServer'
    args = [ '127.0.0.1' ]
}
