*gorilla.txt*                       Gorilla

Gorilla - A Clojure Environment
===============================

Introduction
------------

Gorilla is the successor of Chimp for Clojure. It uses a network connection
to talk to running Clojure. This has several advantages over Chimp. The main
factor is, that it's a two-way street where the screen interface is only one
way. This makes eg. balloons with docstrings possible. Also using a second
channel to send expressions doesn't interfere with the user command history.

Unfortunately Vim itself is quite powerful but in some strange way incapable
of doing what we want. So we have to resort to the Ruby interface to connect
via the network to a running Clojure repl server.

For Windows users the Ruby dependency might be also more tolerable than the
Cygwin dependency for screen.

It currently supports the extraction and sending of s-expressions, the lookup
of docstrings and expansion of macros.

A feature unique to Gorilla compared to Chimp is the Repl running in a Vim
buffer. Supports syntax highlighting, indenting of multi-line expressions
and command history. This is currently very experimental.

To use Gorilla you have to start Clojure via the accompanying jar file.
Make sure, that clojure and clojure-contrib are in your classpath and start
the de.kotka.gorilla class. Keep this somewhere in the foreground to be able
to kill it. Example invocation:
>
        java -cp clojure.jar:clojure-contrib.jar:gorilla.jar de.kotka.gorilla
<
This may look different depending on your system.

Requirements
------------

As stated above, Gorilla needs a Ruby enabled Vim, in particular this
means that Ruby must be installed on your system. Note: The Windows
installers and MacVim already ship with Ruby enabled. For Unix, your vendor
probably provides similar packages.

Gorilla depends on the VimClojure to extract s-expressions. Make sure that
syntax highlighting and filetype plugins are activated.

Keybindings
-----------

<LocalLeader>et                                 *et* *EvaluateTop*
                        Send off the toplevel sexpression currently
                        containing the cursor to the Clojure server.

<LocalLeader>es                                 *es* *EvaluateSexp*
                        Send off the innermost sexpression currently
                        containing the cursor to the Clojure server.

<LocalLeader>eb                                 *eb* *EvaluateBlock*
                        Send off the the mark visual block to the
                        Clojure server. Obviously this mapping is only
                        active in visual mode.

<LocalLeader>ef                                 *ef* *EvaluateFile*
                        Send off the current file to the Clojure Server.

<LocalLeader>rf                                 *rf* *RequireFile*
                        Require the namespace of the current file with
                        the :reload flag. Note: For this to work with a
                        remote Clojure server, the files have to put in
                        place before issueing the command, eg. via scp
                        or NFS.

<LocalLeader>me                                 *me* *MacroExpand*
                        Expand the innermost sexpression currently
                        containing the cursor using macroexpand.

<LocalLeader>m1                                 *m1* *MacroExpand1*
                        Same as MacroExpand, but use macroexpand-1.


<LocalLeader>lw                                 *lw* *LookupWord*
                        Lookup up the word under the cursor and print
                        the documentation for it via (doc).

<LocalLeader>li                                 *li* *LookupInteractive*
                        Lookup the documentation of an arbitrary word.
                        The user is prompted for input.

<LocalLeader>fd                                 *fd* *FindDocumentation*
                        Find a the documentation for a given pattern
                        with (find-doc). The user is prompted for input.

<LocalLeader>jw                                 *jw* *JavadocWord*
                        Open the javadoc for the word under the cursor
                        in an external browser.

<LocalLeader>ji                                 *ji* *JavadocInteractive*
                        Open the javadoc for an arbitrary word in an
                        external browser. The user is prompted for input.

<LocalLeader>sw                                 *sw* *ShowWord*
                        "Show" the class under the cursor and print
                        the information about the class like (static)
                        methods and fields.

<LocalLeader>si                                 *si* *ShowInteractive*
                        "Show" the information of an arbitrary class.
                        The user is prompted for input.

<LocalLeader>gw                                 *gw* *GoWord*
                        Go to the source definition of the word under
                        the cursor. The sources of the namespace must
                        be locally installed and be reachable with the
                        path option. eg.
>
                          set path+=/path/to/clojure/src/clj
<
<LocalLeader>gi                                 *gi* *GoInteractive*
                        Go to the source defintion of an arbitrary
                        item. The user is prompted for input.

<LocalLeader>sr                                 *sr* *StartRepl*
                        Start a new Vim Repl in a fresh buffer. There
                        might be multiple Repls at the same time.

Note: <LocalLeader> is a Vim feature. More information can be found
under the |maplocalleader| help topic.

Vim Repl
--------

Start a Repl via the |sr| shortcut. At the prompt just type expressions.
Hitting enter will determine, whether the expression is complete and
will send it to the Clojure instance. In case the expression is incomplete,
eg. after "(defn foo" will result in a newline for multiline expressions.

Previously sent expressions may be recalled via <C-Up> and <C-Down>.
Note: sending multiple expressions will save them in the same history
entry. So playing back with <C-Up> will again send all of the contained
expressions.

Omni Completion
---------------

Gorilla supports omni completion for Clojure code. Hitting <C-X><C-O> in
insert mode will try to provide completions for the item in front of the
cursor.

Note: This is only implemented for lookup of the static class members at
the moment.

Note: Completion of symbols and keywords is already provided by VimClojure
via the <C-N> functionality.

License
-------

Copyright (c) 2008 Meikel Brandmeyer, Frankfurt am Main
All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
==============================================================================
.. vim: set ft=help norl ts=8 tw=78 et :
